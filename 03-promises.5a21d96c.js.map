{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,UAAWC,SAASC,cAAc,UAClCC,YAAaF,SAASC,cAAc,wBACpCE,WAAYH,SAASC,cAAc,uBACnCG,UAAWJ,SAASC,cAAc,uBA4BpC,SAASI,EAAcC,EAAUC,GAW/B,OAVgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAhCPT,EAAKC,UAAUe,iBAAiB,SAEhC,SAAsBC,GACpBA,EAAIC,iBAKJ,IAJA,IAAMC,EAASC,OAAOpB,EAAKI,YAAYiB,OACnCC,EAAQF,OAAOpB,EAAKK,WAAWgB,OAC7BE,EAAOH,OAAOpB,EAAKM,UAAUe,OAE1BG,EAAW,EAAGA,GAAYL,EAAQK,GAAY,EAAG,CAGxDjB,EAAciB,EAFGF,EAAQC,GAAQC,EAAW,IAGzCC,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MACjBkB,EAAA7B,GAAS8B,OAAOC,KAAK,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAEpEsB,OAAM,SAAAL,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MAClBkB,EAAA7B,GAAS8B,OAAOI,QACd,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  submitBtn: document.querySelector('button'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n  delayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n};\n\nlet timeoutlId = null;\n\nrefs.submitBtn.addEventListener('click', startPromise);\n\nfunction startPromise(evt) {\n  evt.preventDefault();\n  const amount = Number(refs.amountInput.value);\n  let delay = Number(refs.delayInput.value);\n  const step = Number(refs.stepInput.value);\n\n  for (let position = 1; position <= amount; position += 1) {\n    const delayAll = delay + step * (position - 1);\n    // console.log(delayAll);\n    createPromise(position, delayAll)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.info(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","submitBtn","document","querySelector","amountInput","delayInput","stepInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","evt","preventDefault","amount","Number","value","delay1","step","position1","then","param","$parcel$interopDefault","Notify","info","concat","catch","failure"],"version":3,"file":"03-promises.5a21d96c.js.map"}