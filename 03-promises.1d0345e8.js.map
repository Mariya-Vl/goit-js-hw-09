{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,UAAWC,SAASC,cAAc,UAClCC,YAAaF,SAASC,cAAc,wBACpCE,WAAYH,SAASC,cAAc,uBACnCG,UAAWJ,SAASC,cAAc,uBAGpC,IAAII,EAAS,EACTC,EAAa,KACbC,EAAW,EAEfT,EAAKC,UAAUS,iBAAiB,SAEhC,SAAsBC,GACpBA,EAAIC,iBACJL,EAASM,OAAOb,EAAKI,YAAYU,OACjCC,QAAQC,IAAI,uBAAwBT,GACpC,IAAIU,EAAQJ,OAAOb,EAAKK,WAAWS,OACnC,MAAMI,EAAOL,OAAOb,EAAKM,UAAUQ,OAKnC,GAJAC,QAAQC,IAAI,UAAWE,GACvBH,QAAQC,IAAI,WAAYC,GAGpBR,EAAWF,EAEb,OADAY,aAAaX,GACNY,EAAAtB,GAASuB,OAAOC,KAAK,8BAE5Bd,EAAae,YAAW,MAkB5B,SAAuBC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAQtC,OAPgB,IAAIC,SAAQ,CAACC,EAASC,KAChCL,EACFI,EAAQ,CAAEE,SAAAR,E,MAAUC,IAEpBM,EAAO,CAAEC,SAAAR,E,MAAUC,GAAQ,G,EAvB3BQ,CAAcxB,EAAUQ,GACrBiB,MAAK,EAAGF,SAAAG,EAAQV,MAAEA,MACjBV,QAAQC,IAAI,cAAemB,GAC3BpB,QAAQC,IAAI,uBACZI,EAAAtB,GAASuB,OAAOC,KAAK,uBAAqBa,QAAiBV,MAAU,IAEtEW,OAAM,EAAGJ,SAAAK,EAAQZ,MAAEA,MAClBL,EAAAtB,GAASuB,OAAOiB,QAAQ,sBAAoBD,QAAeZ,MAAU,GACrE,GACHR,GAGLA,GAASC,EACPT,GAAY,EACZM,QAAQC,IAAI,2BAA4BC,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  submitBtn: document.querySelector('button'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n  delayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n};\n\nlet amount = 0;\nlet intervalId = null;\nlet position = 1;\n\nrefs.submitBtn.addEventListener('click', startPromise);\n\nfunction startPromise(evt) {\n  evt.preventDefault();\n  amount = Number(refs.amountInput.value);\n  console.log('Amount of promises: ', amount);\n  let delay = Number(refs.delayInput.value);\n  const step = Number(refs.stepInput.value);\n  console.log('Step = ', step);\n  console.log('Delay = ', delay);\n  \n\n  if (position > amount) {\n    clearTimeout(intervalId);\n    return Notiflix.Notify.info(`All promises have used up!`);\n  } else {\n    intervalId = setTimeout(() => {\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          console.log('Position = ', position);\n          console.log('Inside the interval');\n          Notiflix.Notify.info(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });         \n    }, delay);\n    \n  }\n  delay += step;\n    position += 1;\n    console.log('Delay inside the timeout', delay);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n  return promise;\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","submitBtn","document","querySelector","amountInput","delayInput","stepInput","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$intervalId","$47d4ff9957288465$var$position","addEventListener","evt","preventDefault","Number","value","console","log","delay1","step","clearTimeout","$parcel$interopDefault","Notify","info","setTimeout","position3","delay","shouldResolve","Math","random","Promise","resolve","reject","position","$47d4ff9957288465$var$createPromise","then","position1","catch","position2","failure"],"version":3,"file":"03-promises.1d0345e8.js.map"}