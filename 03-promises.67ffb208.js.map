{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,UAAWC,SAASC,cAAc,UAClCC,YAAaF,SAASC,cAAc,wBACpCE,WAAYH,SAASC,cAAc,uBACnCG,UAAWJ,SAASC,cAAc,uBAKpCH,EAAKC,UAAUM,iBAAiB,SAEhC,SAAsBC,G,kBAOlBC,YAAW,WAsBf,IAAuBC,EAAUC,EACzBC,GADeF,EArBHG,EAqBaF,EArBHG,EAsBtBF,EAAgBG,KAAKC,SAAW,GACtB,IAAIC,SAAQ,SAACC,EAASC,GAChCP,EACFM,EAAQ,CAAER,WAAUC,UAEpBQ,EAAO,CAAET,WAAUC,S,KA1BhBS,MAAK,SAAAC,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MACjBW,EAAAxB,GAASyB,OAAOC,KACd,uBAAwCC,OAAff,EAAS,QAAYe,OAANd,EAAM,M,IAIjDe,OAAM,SAAAL,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MAClBW,EAAAxB,GAASyB,OAAOI,QACd,sBAAqCF,OAAff,EAAS,QAAYe,OAANd,EAAM,M,IAI9CiB,SAAQ,WACPd,GAASe,C,MAEZf,E,EAvBLN,EAAIsB,iBAKJ,IAJA,IAAMC,EAASC,OAAOhC,EAAKI,YAAY6B,OACnCnB,EAAQkB,OAAOhC,EAAKK,WAAW4B,OAC7BJ,EAAOG,OAAOhC,EAAKM,UAAU2B,OAE1BC,EAAW,EAAGA,GAAYH,EAAQG,GAAY,EAACC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  submitBtn: document.querySelector('button'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n  delayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n};\n\nlet timeoutlId = null;\n\nrefs.submitBtn.addEventListener('click', startPromise);\n\nfunction startPromise(evt) {\n  evt.preventDefault();\n  const amount = Number(refs.amountInput.value);\n  let delay = Number(refs.delayInput.value);\n  const step = Number(refs.stepInput.value);\n\n  for (let position = 1; position <= amount; position += 1) {\n    setTimeout(() => {\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.info(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n          // delay += step;\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n          // delay += step;\n        })\n        .finally(() => {\n          delay += step;\n        });\n    }, delay);\n    // delay = delay + step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n  return promise;\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","submitBtn","document","querySelector","amountInput","delayInput","stepInput","addEventListener","evt","setTimeout","position","delay","shouldResolve","position1","delay1","Math","random","Promise","resolve","reject","then","param","$parcel$interopDefault","Notify","info","concat","catch","failure","finally","step","preventDefault","amount","Number","value","position11","_loop"],"version":3,"file":"03-promises.67ffb208.js.map"}